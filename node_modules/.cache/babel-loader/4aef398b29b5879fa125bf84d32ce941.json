{"ast":null,"code":"import _slicedToArray from\"/Users/minh/Sites/localhost/react/figma-react-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState,useContext}from'react';export var ThemeContext=createContext({theme:\"light\"});export var ThemeContextProvider=function ThemeContextProvider(_ref){var children=_ref.children;var _useState=useState('light'),_useState2=_slicedToArray(_useState,2),theme=_useState2[0],setTheme=_useState2[1];var toggleTheme=function toggleTheme(){if(theme==='light'){setTheme('dark');}else{setTheme('light');}};return React.createElement(ThemeContext.Provider,{value:{theme:theme,toggleTheme:toggleTheme}},children);};//Custom hook\nexport var useThemeContext=function useThemeContext(){var context=useContext(ThemeContext);if(context===undefined){throw new Error('useThemeContext must be used within a ThemeProvider');}return context;};","map":{"version":3,"sources":["/Users/minh/Sites/localhost/react/figma-react-dashboard/src/context/themeContext.js"],"names":["React","createContext","useState","useContext","ThemeContext","theme","ThemeContextProvider","children","setTheme","toggleTheme","useThemeContext","context","undefined","Error"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,CAAyCC,UAAzC,KAA2D,OAA3D,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGH,aAAa,CAAC,CAAEI,KAAK,CAAE,OAAT,CAAD,CAAlC,CAEP,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eAExBL,QAAQ,CAAC,OAAD,CAFgB,wCAE3CG,KAF2C,eAEpCG,QAFoC,eAIlD,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CAEtB,GAAIJ,KAAK,GAAK,OAAd,CAAuB,CACnBG,QAAQ,CAAC,MAAD,CAAR,CACH,CAFD,IAEO,CACHA,QAAQ,CAAC,OAAD,CAAR,CACH,CACJ,CAPD,CASA,MACI,qBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAC1BH,KAAK,CAALA,KAD0B,CAE1BI,WAAW,CAAXA,WAF0B,CAA9B,EAIKF,QAJL,CADJ,CAQH,CArBM,CAuBP;AACA,MAAO,IAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACjC,GAAMC,CAAAA,OAAO,CAAGR,UAAU,CAACC,YAAD,CAA1B,CACA,GAAIO,OAAO,GAAKC,SAAhB,CAA2B,CACvB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,qDAAV,CAAN,CACH,CAED,MAAOF,CAAAA,OAAP,CACH,CAPM","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\n\nexport const ThemeContext = createContext({ theme: \"light\" })\n\nexport const ThemeContextProvider = ({ children }) => {\n\n    const [theme, setTheme] = useState('light')\n\n    const toggleTheme = () => {\n\n        if (theme === 'light') {\n            setTheme('dark')\n        } else {\n            setTheme('light')\n        }\n    }\n\n    return (\n        <ThemeContext.Provider value={{\n            theme,\n            toggleTheme\n        }} >\n            {children}\n        </ThemeContext.Provider>\n    )\n}\n\n//Custom hook\nexport const useThemeContext = () => {\n    const context = useContext(ThemeContext)\n    if (context === undefined) {\n        throw new Error('useThemeContext must be used within a ThemeProvider')\n    }\n\n    return context\n}"]},"metadata":{},"sourceType":"module"}
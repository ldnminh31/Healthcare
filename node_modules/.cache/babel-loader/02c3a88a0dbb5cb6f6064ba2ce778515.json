{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Sites/localhost/react/figma-react-dashboard/src/context/themeContext.js\";\nimport React, { createContext, useState, useContext } from 'react';\nexport const ThemeContext = createContext({\n  theme: \"light\"\n});\nexport const ThemeContextProvider = ({\n  children\n}) => {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  return React.createElement(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, children);\n}; //Custom hook\n\nexport const useThemeContext = () => {\n  const context = useContext(ThemeContext);\n\n  if (context === undefined) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n\n  return context;\n};","map":{"version":3,"sources":["/Users/minh/Sites/localhost/react/figma-react-dashboard/src/context/themeContext.js"],"names":["React","createContext","useState","useContext","ThemeContext","theme","ThemeContextProvider","children","setTheme","toggleTheme","useThemeContext","context","undefined","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AAEA,OAAO,MAAMC,YAAY,GAAGH,aAAa,CAAC;AAAEI,EAAAA,KAAK,EAAE;AAAT,CAAD,CAAlC;AAEP,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAElD,QAAM,CAACF,KAAD,EAAQG,QAAR,IAAoBN,QAAQ,CAAC,OAAD,CAAlC;;AAEA,QAAMO,WAAW,GAAG,MAAM;AAEtB,QAAIJ,KAAK,KAAK,OAAd,EAAuB;AACnBG,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACH,KAFD,MAEO;AACHA,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACH;AACJ,GAPD;;AASA,SACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1BH,MAAAA,KAD0B;AAE1BI,MAAAA;AAF0B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKF,QAJL,CADJ;AAQH,CArBM,C,CAuBP;;AACA,OAAO,MAAMG,eAAe,GAAG,MAAM;AACjC,QAAMC,OAAO,GAAGR,UAAU,CAACC,YAAD,CAA1B;;AACA,MAAIO,OAAO,KAAKC,SAAhB,EAA2B;AACvB,UAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,SAAOF,OAAP;AACH,CAPM","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\n\nexport const ThemeContext = createContext({ theme: \"light\" })\n\nexport const ThemeContextProvider = ({ children }) => {\n\n    const [theme, setTheme] = useState('light')\n\n    const toggleTheme = () => {\n\n        if (theme === 'light') {\n            setTheme('dark')\n        } else {\n            setTheme('light')\n        }\n    }\n\n    return (\n        <ThemeContext.Provider value={{\n            theme,\n            toggleTheme\n        }} >\n            {children}\n        </ThemeContext.Provider>\n    )\n}\n\n//Custom hook\nexport const useThemeContext = () => {\n    const context = useContext(ThemeContext)\n    if (context === undefined) {\n        throw new Error('useThemeContext must be used within a ThemeProvider')\n    }\n\n    return context\n}"]},"metadata":{},"sourceType":"module"}
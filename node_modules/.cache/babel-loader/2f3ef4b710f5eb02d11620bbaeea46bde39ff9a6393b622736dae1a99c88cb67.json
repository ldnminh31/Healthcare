{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Sites/localhost/react/figma-react-dashboard/src/context/themeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: \"light\"\n});\nexport const ThemeContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState('light');\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('light');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n//Custom hook\n_s(ThemeContextProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeContextProvider;\nexport const useThemeContext = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useThemeContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","ThemeContext","theme","ThemeContextProvider","children","setTheme","toggleTheme","useThemeContext","context","undefined","Error"],"sources":["/Users/minh/Sites/localhost/react/figma-react-dashboard/src/context/themeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react'\n\nexport const ThemeContext = createContext({ theme: \"light\" })\n\nexport const ThemeContextProvider = ({ children }) => {\n\n    const [theme, setTheme] = useState('light')\n\n    const toggleTheme = () => {\n\n        if (theme === 'light') {\n            setTheme('light')\n        }\n    }\n\n    return (\n        <ThemeContext.Provider value={{\n            theme,\n            toggleTheme\n        }} >\n            {children}\n        </ThemeContext.Provider>\n    )\n}\n\n//Custom hook\nexport const useThemeContext = () => {\n    const context = useContext(ThemeContext)\n    if (context === undefined) {\n        throw new Error('useThemeContext must be used within a ThemeProvider')\n    }\n\n    return context\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGH,aAAa,CAAC;EAAEI,KAAK,EAAE;AAAQ,CAAC,CAAC;AAE7D,OAAO,MAAMC,oBAAoB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAE7C,MAAM,CAACF,KAAK,EAAEG,QAAQ,CAAC,GAAGN,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMO,WAAW,GAAG,MAAM;IAEtB,IAAIJ,KAAK,KAAK,OAAO,EAAE;MACnBG,QAAQ,CAAC,OAAO,CAAC;IACrB;EACJ,CAAC;EAED,oBACI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAC1BH,KAAK;MACLI;IACJ,CAAE;IAAA,UACGF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAEhC,CAAC;;AAED;AAAA,GArBaD,oBAAoB;AAAA,KAApBA,oBAAoB;AAsBjC,OAAO,MAAMI,eAAe,GAAG,MAAM;EAAA;EACjC,MAAMC,OAAO,GAAGR,UAAU,CAACC,YAAY,CAAC;EACxC,IAAIO,OAAO,KAAKC,SAAS,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EAC1E;EAEA,OAAOF,OAAO;AAClB,CAAC;AAAA,IAPYD,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}